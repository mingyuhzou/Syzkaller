# Please infer the filename related to the driver based on its operation handler and usage information. Please generate the Syzkaller specification for the initialization of the driver.

If the open filename ends with `#`, please use `syz_open_dev`. Otherwise, when the filename is a constant string, please use `openat`.

# Examples

## Operation Handler in `linux/drivers/block/nbd.c`

```c
# block_device_operations是linux内核为块设备启动设计的一个操作接口结构体，可以将自定义的函数挂到内核的块设备中
static const struct block_device_operations nbd_fops =
{
	.owner =	THIS_MODULE, # 当设备被使用时，防止设备被卸载
	.open =		nbd_open,    # 执行open时调用nbd_open
	.release =	nbd_release, # 执行close时调用nbd_release
	.ioctl =	nbd_ioctl,   # 执行ioctl时调用nbd_ioctl
	.compat_ioctl =	nbd_ioctl, # 兼容，操作系统是64位的但是应用程序是32的
};
```

## Usage of Operation Handler in `linux/drivers/block/nbd.c`.

```c
// 创建一个设备示例，配置资源名称功能，nbd Network Block Device网络块设备
static struct nbd_device *nbd_dev_add(int index, unsigned int refs)
{
	// 指向创建的设备
	struct nbd_device *nbd;
	// 块设备核心结构体
	struct gendisk *disk;
	// 预设错误码
	int err = -ENOMEM;

	/**
		kzalloc(size, flags)是一个内核分配函数，分配大小为size的内存并自动把内容清零
		GFP_KERNEL一种常见的策略
		分配一个新的结构，内容清零，GFP_KERNEL普通内核分配
	/
	nbd = kzalloc(sizeof(struct nbd_device), GFP_KERNEL);

	// 错误处理，这里省略
	if (!nbd)
		goto out;

	/** 
		为nbd驱设备的I/O子系统分配和初始化多队列资源
	/
	err = blk_mq_alloc_tag_set(&nbd->tag_set);
	if (err)
		goto out_free_nbd;


	mutex_lock(&nbd_index_mutex); // 防止被多线程同时修改
	/**
		idr_alloc(&nbd_index_idr, nbd, index, index + 1, GFP_KERNEL);
		在nbd_index_idr表中实现一个[idx,idx+1)到nbd的映射，也就是注册一个编号，GFP_KERNEL指定分配行为
		nbd_index_idr是一个管理nbd_device对应编号的映射表
	/
	// 如果指定了index则分配index,反之自动分配
	if (index >= 0) {
		err = idr_alloc(&nbd_index_idr, nbd, index, index + 1,
				GFP_KERNEL);
		if (err == -ENOSPC)
			err = -EEXIST;
	} else {
		
		err = idr_alloc(&nbd_index_idr, nbd, 0,
				(MINORMASK >> part_shift) + 1, GFP_KERNEL);
		if (err >= 0)
			index = err;
	}
	
	# 写入
	nbd->index = index;

	mutex_unlock(&nbd_index_mutex);
	if (err < 0)
		goto out_free_tags;

	# 分配gendisk
	disk = blk_mq_alloc_disk(&nbd->tag_set, NULL);
	if (IS_ERR(disk)) {
		err = PTR_ERR(disk);
		goto out_free_idr;
	}
	// 绑定
	nbd->disk = disk;

	# 创建接收数据用的工作队列
	nbd->recv_workq = alloc_workqueue("nbd%d-recv",
					  WQ_MEM_RECLAIM | WQ_HIGHPRI |
					  WQ_UNBOUND, 0, nbd->index);
	if (!nbd->recv_workq) {
		dev_err(disk_to_dev(nbd->disk), "Could not allocate knbd recv work queue.\n");
		err = -ENOMEM;
		goto out_err_disk;
	}

	/*
	 * Tell the block layer that we are not a rotational device
	 */
	# 设置块队列参数
	blk_queue_flag_set(QUEUE_FLAG_NONROT, disk->queue); / 告诉内核该设备不是机械硬盘
	disk->queue->limits.discard_granularity = 0; // 禁用discard
	blk_queue_max_discard_sectors(disk->queue, 0);// 设置最大可discard的扇区数，为0等同于彻底关闭discard
	blk_queue_max_segment_size(disk->queue, UINT_MAX);
	blk_queue_max_segments(disk->queue, USHRT_MAX);
	blk_queue_max_hw_sectors(disk->queue, 65536);
	disk->queue->limits.max_sectors = 256;

	mutex_init(&nbd->config_lock);
	refcount_set(&nbd->config_refs, 0);
	/*
	 * Start out with a zero references to keep other threads from using
	 * this device until it is fully initialized.
	 */
	refcount_set(&nbd->refs, 0);
	INIT_LIST_HEAD(&nbd->list);


	disk->major = NBD_MAJOR; // 设置块设备的主设备号
	disk->first_minor = index << part_shift; // 起始次设备号
	disk->minors = 1 << part_shift; // 表示设备支持的 次设备号数量
	disk->fops = &nbd_fops; # 设备操作函数
	disk->private_data = nbd;
	sprintf(disk->disk_name, "nbd%d", index); # 设置设备名
	err = add_disk(disk);  # 注册到内核
}
```

## Syzkaller Specification


```json
{
	# open定义如何打开目标设备
	"open": {
		"filename": "/dev/nbd#", # 设备路径
		"fd_name": "fd_nbd",     # 该调用的返回值名称
		"spec": "syz_open_dev$ndb(dev ptr[in, string[\"/dev/nbd#\"]], id proc[0, 1], flags flags[open_flags]) fd_nbd"
	},
	"resources": {
		"fd_nbd": {
			"type": "fd",
			"spec": "resource fd_nbd[fd]"
		}
	}
}
```

## Operation Handler in `linux/drivers/scsi/sd.c`

```c
static const struct block_device_operations sd_fops = {
	.owner			= THIS_MODULE,
	.open			= sd_open,
	.release		= sd_release,
	.ioctl			= sd_ioctl,
	.getgeo			= sd_getgeo,
	.compat_ioctl		= blkdev_compat_ptr_ioctl,
	.check_events		= sd_check_events,
	.unlock_native_capacity	= sd_unlock_native_capacity,
	.report_zones		= sd_zbc_report_zones,
	.get_unique_id		= sd_get_unique_id,
	.free_disk		= scsi_disk_free_disk,
	.pr_ops			= &sd_pr_ops,
};
```

## Usage of Operation Handler in `linux/drivers/scsi/sd.c`:

```c
static int sd_probe(struct device *dev)
{
	struct scsi_device *sdp = to_scsi_device(dev);
	struct scsi_disk *sdkp;
	struct gendisk *gd;
	int index;
	int error;

	scsi_autopm_get_device(sdp);
	error = -ENODEV;
	if (sdp->type != TYPE_DISK &&
	    sdp->type != TYPE_ZBC &&
	    sdp->type != TYPE_MOD &&
	    sdp->type != TYPE_RBC)
		goto out;

	if (!IS_ENABLED(CONFIG_BLK_DEV_ZONED) && sdp->type == TYPE_ZBC) {
		sdev_printk(KERN_WARNING, sdp,
			    "Unsupported ZBC host-managed device.\n");
		goto out;
	}

	SCSI_LOG_HLQUEUE(3, sdev_printk(KERN_INFO, sdp,
					"sd_probe\n"));

	error = -ENOMEM;
	sdkp = kzalloc(sizeof(*sdkp), GFP_KERNEL);
	if (!sdkp)
		goto out;

	gd = blk_mq_alloc_disk_for_queue(sdp->request_queue,
					 &sd_bio_compl_lkclass);
	if (!gd)
		goto out_free;

	index = ida_alloc(&sd_index_ida, GFP_KERNEL);
	if (index < 0) {
		sdev_printk(KERN_WARNING, sdp, "sd_probe: memory exhausted.\n");
		goto out_put;
	}

	error = sd_format_disk_name("sd", index, gd->disk_name, DISK_NAME_LEN);
	if (error) {
		sdev_printk(KERN_WARNING, sdp, "SCSI disk (sd) name length exceeded.\n");
		goto out_free_index;
	}

	sdkp->device = sdp;
	sdkp->disk = gd;
	sdkp->index = index;
	sdkp->max_retries = SD_MAX_RETRIES;
	atomic_set(&sdkp->openers, 0);
	atomic_set(&sdkp->device->ioerr_cnt, 0);

	if (!sdp->request_queue->rq_timeout) {
		if (sdp->type != TYPE_MOD)
			blk_queue_rq_timeout(sdp->request_queue, SD_TIMEOUT);
		else
			blk_queue_rq_timeout(sdp->request_queue,
					     SD_MOD_TIMEOUT);
	}

	device_initialize(&sdkp->disk_dev);
	sdkp->disk_dev.parent = get_device(dev);
	sdkp->disk_dev.class = &sd_disk_class;
	dev_set_name(&sdkp->disk_dev, "%s", dev_name(dev));

	error = device_add(&sdkp->disk_dev);
	if (error) {
		put_device(&sdkp->disk_dev);
		goto out;
	}

	dev_set_drvdata(dev, sdkp);

	gd->major = sd_major((index & 0xf0) >> 4);
	gd->first_minor = ((index & 0xf) << 4) | (index & 0xfff00);
	gd->minors = SD_MINORS;

	gd->fops = &sd_fops;
	gd->private_data = sdkp;

	sd_revalidate_disk(gd);

	if (sdp->removable) {
		gd->flags |= GENHD_FL_REMOVABLE;
		gd->events |= DISK_EVENT_MEDIA_CHANGE;
		gd->event_flags = DISK_EVENT_FLAG_POLL | DISK_EVENT_FLAG_UEVENT;
	}

	blk_pm_runtime_init(sdp->request_queue, dev);
	if (sdp->rpm_autosuspend) {
		pm_runtime_set_autosuspend_delay(dev,
			sdp->host->hostt->rpm_autosuspend_delay);
	}

	error = device_add_disk(dev, gd, NULL);

	sd_printk(KERN_NOTICE, sdkp, "Attached SCSI %sdisk\n",
		  sdp->removable ? "removable " : "");
	scsi_autopm_put_device(sdp);

	return 0;
}
```

## Syzkaller Specification

```json
{
	"open": {
		"filename": "/dev/sd#",
		"fd_name": "fd_sd",
		"spec": "syz_open_dev$sd(dev ptr[in, string[\"/dev/sd#\"]], id proc[0, 1], flags flags[open_flags]) fd_sd"
	},
	"resources": {
		"fd_sd": {
			"type": "fd",
			"spec": "resource fd_sd[fd]"
		}
	}
}
```

## Operation Handler in `linux/drivers/md/dm-ioctl.c`

```c
static const struct file_operations _ctl_fops = {
	.open    = dm_open,
	.release = dm_release,
	.poll    = dm_poll,
	.unlocked_ioctl	 = dm_ctl_ioctl,
	.compat_ioctl = dm_compat_ctl_ioctl,
	.owner	 = THIS_MODULE,
	.llseek  = noop_llseek,
};
```

## Usage of Operation Handler in `linux/drivers/md/dm-ioctl.c`

```c
static struct miscdevice _dm_misc = {
	.minor		= MAPPER_CTRL_MINOR,
	.name		= DM_NAME,
	.nodename	= DM_DIR "/" DM_CONTROL_NODE,
	.fops		= &_ctl_fops
};
```

## Syzkaller Specification

```json
{
	"open": {
		"filename": "/dev/mapper/control",
		"fd_name": "fd_dm_ctl",
		"spec": "openat$dm(fd const[AT_FDCWD], file ptr[in, string[\"/dev/mapper/control\"]], flags const[O_RDWR], mode const[0]) fd_dm_ctl"
	},
	# resources指定资源类型
	"resources": {
		"fd_dm_ctl": {
			"type": "fd",
			"spec": "resource fd_dm[fd]"
		}
	}
}
```

# Target to Generate

## Operation Handler in `PATH_PLACEHOLDER`

```c
SOURCE_CODE_PLACEHOLDER
```

## Usage of Operation Handler in `PATH_PLACEHOLDER`

```c
USED_SOURCE_CODE_PLACEHOLDER
```

## Syzkaller Specification
